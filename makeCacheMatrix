## makeCacheMatrix function creates a special "matrix" object that can cache its inverse
## cacheSolve  computes the inverse of the special "matrix" returned by makeCacheMatrix
makCacheMatrix <- function(x = matrix()) {
        # stores the cached value
        cache <- NULL
        # initialize to NULL
        # sets the function
        set <- function(y) {
                x <<- y
                cache <<- NULL
        }
        # gets the value of the matrix
        get <- function() x
        # invert the matrix and store in cache
        setMatrix <- function(inverse) cache <<- inverse
        # get the inverted matrix from cache
        getInverse <- function() cache

        # return the created functions to the working environment
        list(set = set, get = get,
             setMatrix = setMatrix,
             getInverse = getInverse)
}
